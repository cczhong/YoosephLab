#!/usr/bin/perl -w
use strict;

my $cluster_file = shift;	# the cluster file generated by R
my $taxa_count = shift;		# the BLAST NT results with the mapped taxa, expecting /usr/local/projdata/0599/projects/SPA/czhong/Works/OralRES/Results/SPAdes_contigs.cdhit.BLAST.NT.taxa
my $func_count = shift;		# the tabulated HMM search results on the entire contig, expecting /usr/local/projdata/0599/projects/SPA/czhong/Works/OralRES/Results/SPAdes_contigs.cdhit.hmmer.tab
my $categ_map = shift;		# expecting the metadata to define category, e.g. /usr/local/projdata/0599/projects/SPA/czhong/Works/OralRES/Data/resfams_merged.txt
my $col_key = shift;		# the column ID for the metadata key
my $col_val = shift;		# the column ID for the metadata value

# computes background count, first with a taxonomy with species level
my %taxa_count;
my $taxa_total = 0;
open my $TIN, "<$taxa_count" or die "Cannot open file: $!\n";
while(<$TIN>)  {
  chomp;
  my @decom = split /\t/, $_;
  my @decom2 = split /\s+/, $decom[0];
  my $key = $decom2[0] . '_' . $decom2[1];
  if($key =~ /unknown/ || $key =~ /uncultured/)  {
    next;
  }
  ++ $taxa_count{$key};
  ++ $taxa_total;
}
close $TIN;

#foreach(keys %taxa_count)  {
#  print "$_	$taxa_count{$_}\n";
#}

# computes backgound with functional categories
my %categ_hash;
open my $CIN, "<$categ_map" or die "Cannot open file: $!\n";
while(<$CIN>)  {
  chomp;
  my @decom = split /\t/, $_;
  $decom[$col_val] =~ s/ /\_/g;
  $categ_hash{$decom[$col_key]} = $decom[$col_val];
}
close $CIN;

#foreach(keys %categ_hash)  {
#  print "$_	$categ_hash{$_}\n";
#}

my %func_count;
my $func_total = 0;
open my $FIN, "<$func_count" or die "Cannot open file: $!\n";
while(<$FIN>)  {
  chomp;
  my @decom = split /\s+/, $_;
  if(exists $categ_hash{$decom[0]})  {
    ++ $func_count{$categ_hash{$decom[0]}};
    ++ $func_total;
  }
}
close $FIN;

#foreach(keys %func_count)  {
#  print "$_	$func_count{$_}\n";
#}

# parse the cluster table and generate the contigency table for Fisher's exact test
my @cluster_info;
my @header;
open my $AIN, "<$cluster_file" or die "Cannot open file: $!\n";
my $line = <$AIN>;
chomp $line;
@header = split /\s+/, $line;
while(<$AIN>)  {
  chomp;
  my @decom = split /\s+/, $_;
  $decom[0] =~ s/\"//g;
  if($decom[0] =~ /unknown/ || $decom[0] =~ /uncultured/)  {
    next;
  }
  push @cluster_info, \@decom;
}
close $AIN;

for(my $i = 1; $i <= scalar(@header); ++ $i)  {
  my %groups;
  for(my $k = 0; $k < scalar(@cluster_info); ++ $k)  {
    push @{$groups{$cluster_info[$k][$i]}}, $cluster_info[$k][0];
  }
  foreach(keys %groups)  {
    my $gid = $_;
    my $gsize = scalar(@{$groups{$gid}});
    my %tc;
    my %fc;
    foreach(@{$groups{$gid}})  {
      my @decom = split /\|\|/, $_;
      ++ $fc{$decom[2]};
      my @decom2 = split /\_/, $decom[3];
      my $taxa_key = $decom2[0] . '_' . $decom2[1];
      ++ $tc{$taxa_key};
    }
    foreach(keys %tc)  {
      #print "$_	$tc{$_}\n";
      print "TAXA	$header[$i - 1]	$gid	$_	$tc{$_}	$gsize	$taxa_count{$_}	$taxa_total\n";
    }
    foreach(keys %fc)  {
      print "FUNC	$header[$i - 1]	$gid	$_	$fc{$_}	$gsize	$func_count{$_}	$func_total\n";
    }
  }
}
