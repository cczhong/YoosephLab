SPA: a Short Peptide Assembler for metagenomic data

SPA is written in C++ and has been compiled on a 64-bit Linux box. The
memory requirement largely depends on size of the input read set. Perl
is used for scripting the various SPA components. The following Perl
libraries need to be installed.

- Set::Scalar
- Getopt::Long
- Time::HiRes
- constant
- Statistics::Lite
- POSIX
- File::Basename
- File::Spec

The main script is called spa_suit.pl and it takes as input nucleotide
fasta file(s) together with a parameter file. The parameter file can
be configured to run on either Illumina sequence data or (fragment)
read sequence data (for instance, generated by 454's technology). The
current implementation of SPA however mainly targets (and has been
tested on) Illumina's technology (fragment or paired-end). We will
extend our implementation in a future release to fully incorporate
other sequencing technologies.

Pair-end read convention used for Illumina data: Please make sure that
members of the read pair can be identified by /1 and /2.  We will make
it work for other identifiers and formats in future updates. SPA
handles both paired and unpaired data. In fact, when the gene finder
is applied to the interleaved paired-end data, it can happen that only
one of the fragments has a gene called on it. Thus, the actual input
to the SPA program is an interleaved file (with some read ids
missing). SPA can handle multiple input files, and therefore can also
handle a paired-end read dataset together with a separate fragment
read dataset.

==================================

Program Installation:
1. Unpack the tarball file.
   $ tar xzvf spa.tar.gz
2. Export SPA directory.
   $ export SPA=spa_installed_directory_name
   e.g. export SPA=~/bin/spa 
3. Update PATH.
   $ export PATH=$PATH:$SPA

Alternatively, edit your configuration file (e.g.: .bashrc,
.bash_profile) to make permanent changes.

==================================

To set up the Gene-finders:
Currently, SPA can use one of FragGeneScan or MetaGeneAnnotator (ia64
Linux) as the gene-finder. We will include other gene-finders in
future releases. For user convenience, the above programs are included
in the spa tarball file, and when unpacked, appear in the fgs and mga
directories respectively.
1. FragGeneScan: v1.16
   Decompress tar file, install the program, and export the program path.
   $ cd fgs 
   $ tar zxvf FragGeneScan1.16.tar.gz && cd FragGeneScan1.16
   $ make
   $ export FGS=`pwd`
2. MetaGeneAnnotator: ia64 Linux
   Decompress tar file and export the program path.
   $ cd mga
   $ tar zxvf mga_ia64.tar.gz
   $ export MGA=`pwd`
3. Update PATH.
   $ export PATH=$PATH:$FGS:$MGA

Alternatively, edit your configuration file (e.g.: .bashrc,
.bash_profile) to make permanent changes. Please note that the
FragGeneScan (FGS) and MetaGeneAnnotator (MGA) programs have only been
included with the spa tarball for convenience. We recommend using the
latest versions of these programs. Since we are not the developers of
these programs, we are not responsible for their correctness,
maintenance, or updates. Please follow any guidelines or updates from
their developers' web sites.

==================================

To run the peptide assembler:
The overall assembly process has three stages - (Stage 1) GF: Gene
finding stage, (Stage 2) SPA: peptide assembly stage, and (Stage 3)
PP: post-processing stage. Please see the SPA paper for details of
each stage. All of these stages (GF+SPA+PP) can be run together using
the main script spa_suit.pl; it takes DNA reads in FASTA format and
performs gene calling, peptide assembly, and post-processing in a
single batch.

Usage: spa_suit.pl [-o <output directory>] -p <parameter file> -i <FASTA files>
      -p, --parameters : [required] string 	  Program parameter file
      -i, --input      : [required] string 	  FASTA file(s) of DNA reads
      -o, --output     : [optional] string	  Output directory (default:.)
      -h, --help                           	  Print this message

Multiple input files can be provided by listing file names after -i option.
e.g. spa_suit.pl -o . -p parameter.illumina -i file1.fasta file2.fasta file3.fasta

The parameter file specifies the parameters for the programs in each of
the three stages. See parameter.illumina and parameter.generic for two
examples of parameter files that we have included (the former is for
running on Illumina data using FragGeneScan and the later is for a
generic input nucleotide fasta file). The parameter file can (and
should) be edited depending on the quality and depth of coverage of
your input nucleotide sequence data.


Parameters for Stage 2 that will affect run time and output quality
are given below (along with suggested default values for Illumina
data). As noted above, these may need to be changed depending on the
input data (Lines starting with # are comments).

## Size of kmer
kmer    6

## Graph trimming (1:true or 0:false)
## Trim vertices/edges with low coverage
trim    1

## Minimum kmer coverage for trimming graph
## Vertices and edges with lower coverage than the following value are trimmed. 
## If trim option is off, this option is ignored.
min-coverage    5

## Minimum number of overlapping reads with a neighboring node.
## Sharing reads between current and neighboring nodes with lower than the following support are ignored.
min-share       5

## Maximum distant node in a path to find same reads in a current node (i.e. value of n for the n_overlap function)
distance        20

## Minimum base coverage in consensus
## Leading and trailing bases with lower than the folllowing coverage are trimmed from a consensus sequence.
base-depth      3

## Median base depth in consensus
## A path with lower than the following median base depth is discarded
med-coverage    10

## Top x% percentile of seed kmers
## Path search utilizes top x% of seed kmers
percentile      50

==================================

Example: An example simulated Illumina data set is provided in the
example directory.  Run SPA with a file of pre-configured program
options.
$ spa_suit.pl -O parameter.illumina -i example/reads.fasta.gz >& example/spa.suit.log

In this example, SPA uses preset program parameters in parameter.illumina file.

==================================

The script spa_suit.pl actually calls three scripts call_orfs.pl (GF
stage), run_spa.pl (SPA stage), and clean_spa.pl (PP stage). These
scripts can be run separately as well, as shown below.

(GF stage) Call genes.
The following script takes DNA reads in FASTA format and performs gene
prediction by calling a gene predictor, and process the gene products
to make peptides reads to used in SPA.

Usage: call_orfs.pl [options]
Examples:
---------
1. Call ORFs with FGS
$ call_orfs.pl -i example/reads.fasta.gz -o example/orf -n 2 -T complete >& example/orf.log

2. Call ORFs with MGA
$ call_orfs.pl -i example/reads.fasta.gz -o example/orf -g 1 -n 2 >& example/orf.log

(SPA stage) Run SPA. 
The following script takes FASTA formatted amino acid reads. It
consists of two steps. First, it prepares the peptide assembler
inputs, and then it calls the assembly program.

Usage: run_spa.pl [options]
Example:
--------
$ run_spa.pl -i example/orf/fgs.noindel.faa -o example/spa -p -a -M >& example/spa.log

The script above is equivalent to the following two successive commands.
[1]. Make SPA input only.
prespa [options]
Example:
--------
$ prespa -k 6 -G example/spa/gin -I example/spa/iin -i example/orf/fgs.noindel.faa >& example/spa/pre.log

[2]. Run SPA using graph input and inverted index from the previous stage.
Usage: spa [options]
Example:
-------
$ spa -k 6 -G example/spa/gin -I example/spa/iin -o example/spa --profile --alignment --pair-end -i example/orf/fgs.noindel.faa >& example/spa/spa.log
As in the example, enforce "--pair-end" flag to assemble pair-end reads.

(PP stage) Post processing: 
The following script performs post-processing of SPA assembly by
re-calling genes and disregarding short paths. Output: spa.post.fasta

Usage:clean_spa.pl [options]
Example:
-------
$ clean_spa.pl -a example/orf/fgs.noindel.faa -d example/orf/fgs.noindel.ffn -s example/spa/spa.fasta -r example/spa/spa.place -o example/post >& example/post/post.log
In this example, FGS is used for re-calling genes. 

==================================

SPA citation
If you use SPA in your work, please cite the associated publication.


Contact information:
Youngik Yang (yyang at jcvi.org) and Shibu Yooseph (syooseph at jcvi.org)


