#!/usr/bin/perl -w
use strict;

my $query_file = shift;
my $reference_dir = shift;
my $cutoff = shift;
my $bp_file = shift; # blastp results file
my $ps_file = shift; # psi-blast results file
my $fm_file = shift; # fastm results file
my $gx_file = shift; # graspx results file (mapped format)

my $header_len = 60;

sub LoadBLASTStyleResults($$$$) {
  my $e = shift;
  my $hl = shift;
  my $file = shift;
  my $hash = shift;
  open my $IN, "<$file" or die "Cannot open file: $!\n";
  while(<$IN>)  {
    chomp;
    if(/^#/ || /^\/\//)  {
      next;
    }
    my @decom = split /\s+/, $_;
    if(scalar(@decom) >= 11 && $decom[10] < $e)  {
      my $header = substr($decom[1], 0, $hl);
      push @{$hash->{$decom[0]}}, $header;
    }
  }
  close $IN;
  return;
}

sub LoadGRASPxStyleResults($$$$) {
  my $e = shift;
  my $hl = shift;
  my $file = shift;
  my $hash = shift;
  open my $IN, "<$file" or die "Cannot open file: $!\n";
  while(<$IN>)  {
    chomp;
    my @decom = split /\s+/, $_;
    my @info = split /\:\:/, $decom[2];
    if($info[2] < $e)  {
      my $header = substr($decom[1], 0, $hl);
      $info[0] =~ /^(.*)\|\|/;
      my $q_tag = $1;
      push @{$hash->{$q_tag}}, $header;
    }
  }
  close $IN;
  return;
} 

sub ComputePerformanceRawCounts($$$)  {
  my $qid = shift;
  my $ref_hash = shift;
  my $result_hash = shift;
  my @performance;
  $performance[0] = 0; # true positive
  $performance[1] = 0; # total count
  my %checked;
  foreach (@{$result_hash->{$qid}})  {
    if(!exists $checked{$_}) {
      if(exists $ref_hash->{$_})  {
        ++ $performance[0];
      }
      ++ $performance[1];
      $checked{$_} = 1;
    }
  }
  return @performance;
}

# load in the results generated by each program

my %bp_hash;
my %ps_hash;
my %fm_hash;
my %gx_hash;

LoadBLASTStyleResults($cutoff, $header_len, $bp_file, \%bp_hash);
LoadBLASTStyleResults($cutoff, $header_len, $ps_file, \%ps_hash);
LoadBLASTStyleResults($cutoff, $header_len, $fm_file, \%fm_hash);
LoadGRASPxStyleResults($cutoff, $header_len, $gx_file, \%gx_hash);

# parse the query file and list all potential queries used in the experiment
open my $QIN, "<$query_file" or die "Cannot open file: $!\n";
while(<$QIN>) {
  chomp;
  if(/^>(.*)/)  {
    my $qtag = $1;
    my %ref_hash;
    # check if there exists file correspond to the query
    if(-e "$reference_dir/$qtag.ref")  {
      open my $RIN, "<$reference_dir/$qtag.ref" or die "Cannot open file: $!\n";
      while(<$RIN>)  {
        chomp;
        my @decom = split /\s+/, $_;
        my $tag = substr($decom[0], 0, $header_len);
        $ref_hash{$tag} = 1;
      }
      close $RIN;
    }
    
    # compute raw counts performance
    my @perfm_bp = ComputePerformanceRawCounts($qtag, \%ref_hash, \%bp_hash);
    my @perfm_ps = ComputePerformanceRawCounts($qtag, \%ref_hash, \%ps_hash);
    my @perfm_fm = ComputePerformanceRawCounts($qtag, \%ref_hash, \%fm_hash);
    my @perfm_gx = ComputePerformanceRawCounts($qtag, \%ref_hash, \%gx_hash);
    
    # output
    my $size = scalar(keys %ref_hash);
    print "$qtag\t$size\t$perfm_bp[0]\t$perfm_bp[1]\t$perfm_ps[0]\t$perfm_ps[1]\t$perfm_fm[0]\t$perfm_fm[1]\t$perfm_gx[0]\t$perfm_gx[1]\n";
  }
}
close $QIN;

#foreach(keys %gx_hash) {
#  print "$_\n";
#}
